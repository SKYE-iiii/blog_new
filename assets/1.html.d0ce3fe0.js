import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,f as t}from"./app.ce1b0c10.js";const p={},e=t(`<h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h1><blockquote><p>在开发过程中,前端的开发工作往往会比较受限于后端.比如项目的很多功能需要借助后端的接口数据才能进行开发测试.以往是使用手写 json 数据或者让后端大佬写测试数据提供测试. 但是这种的效率相对都比较慢. 而 mockjs 能够很好的解决这一问题.模拟接口,随机生成数据, 使前端和后端的工作配合更加高效,且让前端攻城师独立于后端进行开发(项目 demo 练习时不再受限于没有数据)。</p></blockquote><p><code>提示：以下是本篇文章正文内容，如有不当之处欢迎指正</code></p><h1 id="一、关于-mockjs" tabindex="-1"><a class="header-anchor" href="#一、关于-mockjs" aria-hidden="true">#</a> 一、关于 mockjs？</h1><p>Mock.js 是一款模拟数据生成器，旨在帮助前端攻城师独立于后端进行开发，帮助编写单元测试。提供了以下模拟功能：</p><ul><li>根据数据模板生成模拟数据</li><li>模拟 Ajax 请求，生成并返回模拟数据</li><li>基于 HTML 模板生成模拟数据</li></ul><h1 id="二、mockjs-引入步骤" tabindex="-1"><a class="header-anchor" href="#二、mockjs-引入步骤" aria-hidden="true">#</a> 二、mockjs 引入步骤</h1><h2 id="_1-安装依赖" tabindex="-1"><a class="header-anchor" href="#_1-安装依赖" aria-hidden="true">#</a> 1.安装依赖</h2><blockquote><p>代码如下（示例）：</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm install mockjs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-新建-mock-index-js" tabindex="-1"><a class="header-anchor" href="#_2-新建-mock-index-js" aria-hidden="true">#</a> 2.新建 mock/index.js</h2><p>代码如下（示例）：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Mock <span class="token keyword">from</span> <span class="token string">&quot;mockjs&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-在-main-js-中引入" tabindex="-1"><a class="header-anchor" href="#_3-在-main-js-中引入" aria-hidden="true">#</a> 3.在 main.js 中引入</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&quot;./mock&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="三、mockjs-的语法规范" tabindex="-1"><a class="header-anchor" href="#三、mockjs-的语法规范" aria-hidden="true">#</a> 三、mockjs 的语法规范</h1><p>Mock.js 的语法规范包括两部分：</p><ol><li>数据模板定义（Data Temaplte Definition，DTD）</li><li>数据占位符定义（Data Placeholder Definition，DPD）</li></ol><h2 id="_1-数据模板定义" tabindex="-1"><a class="header-anchor" href="#_1-数据模板定义" aria-hidden="true">#</a> 1.数据模板定义</h2><p>数据模板中的每个属性由 3 部分构成：属性名、生成规则、属性值：</p><blockquote><p>// 属性名 name // 生成规则 rule // 属性值 value &#39;name|rule&#39;: value</p></blockquote><h2 id="_2-数据模板-生成规则" tabindex="-1"><a class="header-anchor" href="#_2-数据模板-生成规则" aria-hidden="true">#</a> 2. 数据模板-生成规则</h2><ol><li>&#39;name|min-max&#39;: value</li><li>&#39;name|count&#39;: value</li><li>&#39;name|min-max.dmin-dmax&#39;: value</li><li>&#39;name|min-max.dcount&#39;: value</li><li>&#39;name|count.dmin-dmax&#39;: value</li><li>&#39;name|count.dcount&#39;: value</li><li>&#39;name|+step&#39;: value <code>提示: 1.属性名和生成规则之间使用 | 分隔 2. 生成规则的含义需要依赖属性值才能确定 (下面案例解释)</code></li></ol><h3 id="_1-属性值是字符串-string" tabindex="-1"><a class="header-anchor" href="#_1-属性值是字符串-string" aria-hidden="true">#</a> 1).属性值是字符串 String</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// &quot;string|min-max&quot;:通过重复 &#39;value&#39; 生成一个字符串，重复次数大于等于 min，小于等于 max。</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;string|1-5&quot;</span><span class="token operator">:</span> <span class="token string">&quot;测试&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&quot;str&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//{string: &quot;测试测试测试测试测试&quot;}</span>

<span class="token comment">// &#39;name|count&#39;: &#39;value&#39; 通过重复 &#39;value&#39; 生成一个字符串，重复次数等于 count。</span>
<span class="token keyword">const</span> str2 <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;string|2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;测试&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token string">&quot;str2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {string: &quot;测试测试&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-属性值是数字-number" tabindex="-1"><a class="header-anchor" href="#_2-属性值是数字-number" aria-hidden="true">#</a> 2) 属性值是数字 Number</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
&#39;name|+1&#39;: 100 属性值自动加 1，初始值为 100
&#39;name|1-100&#39;: 100 生成一个大于等于 1、小于等于 100 的整数，属性值 100 只用来确定类型。
&#39;name|1-100.1-10&#39;: 100 生成一个浮点数，整数部分大于等于 1、小于等于 100，小数部分保留 1 到 10 位。
 */</span>

<span class="token keyword">const</span> number <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;number1|+1&quot;</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;number2|1-100&quot;</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;number3|1-100.1-10&quot;</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//{number1: 100,number2: 99,number3: 100.748}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-属性值是布尔型-boolean" tabindex="-1"><a class="header-anchor" href="#_3-属性值是布尔型-boolean" aria-hidden="true">#</a> 3)属性值是布尔型 Boolean</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
&#39;name|1&#39;: value 随机生成一个布尔值，值为 true 的概率是 1/2，值为 false 的概率是 1/2。
&#39;name|min-max&#39;: value 随机生成一个布尔值，值为 value 的概率是 min / (min + max)，值为 !value 的概率是 max / (min + max)。
 */</span>

<span class="token keyword">const</span> boolean <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;boolean1|1&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;boolean2|1-2&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boolean<span class="token punctuation">,</span> <span class="token string">&quot;Boolean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {boolean1: true , boolean2: false}  --具有随机性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-属性值是对象-object" tabindex="-1"><a class="header-anchor" href="#_4-属性值是对象-object" aria-hidden="true">#</a> 4) 属性值是对象 Object</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;obj1|3&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
    <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span>
    <span class="token number">3</span><span class="token operator">:</span> <span class="token string">&quot;王五&quot;</span><span class="token punctuation">,</span>
    <span class="token number">4</span><span class="token operator">:</span> <span class="token string">&quot;赵六&quot;</span><span class="token punctuation">,</span>
    <span class="token number">5</span><span class="token operator">:</span> <span class="token string">&quot;匿名&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;obj2|1-5&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
    <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span>
    <span class="token number">3</span><span class="token operator">:</span> <span class="token string">&quot;王五&quot;</span><span class="token punctuation">,</span>
    <span class="token number">4</span><span class="token operator">:</span> <span class="token string">&quot;赵六&quot;</span><span class="token punctuation">,</span>
    <span class="token number">5</span><span class="token operator">:</span> <span class="token string">&quot;匿名&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;obj&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://img-blog.csdnimg.cn/8f3b1cfbbeb24ccb8f8bf3bf65bf9ef1.png#pic_center" alt="在这里插入图片描述" loading="lazy"></p><h3 id="_5-属性值是数组-array" tabindex="-1"><a class="header-anchor" href="#_5-属性值是数组-array" aria-hidden="true">#</a> 5) 属性值是数组 Array</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
&#39;name|1&#39;: [<span class="token punctuation">{</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token punctuation">}</span> ...] 从属性值 [<span class="token punctuation">{</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token punctuation">}</span> ...] 中随机选取 1 个元素，作为最终值。
&#39;name|+1&#39;: [<span class="token punctuation">{</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token punctuation">}</span> ...] 从 属性值 [<span class="token punctuation">{</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token punctuation">}</span> ...] 中 按索引顺序+1选取1个元素 ,作为最终值
&#39;name|min-max&#39;: [<span class="token punctuation">{</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token punctuation">}</span> ...] 通过重复属性值 [<span class="token punctuation">{</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token punctuation">}</span> ...] 生成一个新数组，重复次数大于等于 min，小于等于 max。
&#39;name|count&#39;: [<span class="token punctuation">{</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token punctuation">}</span> ...] 通过重复属性值 [<span class="token punctuation">{</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token punctuation">}</span> ...] 生成一个新数组，重复次数为 count。
 */</span>

<span class="token keyword">const</span> array <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;array1|1&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;AMD&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;CMD&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;UMD&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;array2|+1&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;AMD&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;CMD&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;UMD&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;array3|1-10&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Mock.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;array4|3&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Mock.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token string">&quot;array&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://img-blog.csdnimg.cn/e1e18b1f07fd48d6a4916877cf222f57.png#pic_center" alt="在这里插入图片描述" loading="lazy"></p><h3 id="_6-属性值是数组-function" tabindex="-1"><a class="header-anchor" href="#_6-属性值是数组-function" aria-hidden="true">#</a> 6) 属性值是数组 Function</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
&#39;name&#39;: function()<span class="token punctuation">{</span><span class="token punctuation">}</span> 执行函数 function()<span class="token punctuation">{</span><span class="token punctuation">}</span>，取其返回值作为最终的属性值，上下文为 &#39;name&#39; 所在的对象。
 */</span>

<span class="token keyword">const</span> fun <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&quot;Syntax Demo&quot;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">name</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">gender</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;女&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fun<span class="token punctuation">,</span> <span class="token string">&quot;fun&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  {foo: &quot;Syntax Demo&quot;,gender: &quot;女&quot;,name: &quot;Syntax Demo&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-数据占位符定义" tabindex="-1"><a class="header-anchor" href="#_3-数据占位符定义" aria-hidden="true">#</a> 3.数据占位符定义</h2><blockquote><p>占位符 只是在属性值字符串中占个位置，并不出现在最终的属性值中。占位符 的格式为： @占位符 @占位符(参数 [, 参数])</p></blockquote><h2 id="_4-数据占位符-常用生成方法" tabindex="-1"><a class="header-anchor" href="#_4-数据占位符-常用生成方法" aria-hidden="true">#</a> 4. 数据占位符-常用生成方法</h2><p><code>提示: 以下是使用占位符的注意事项:</code></p><ol><li>用 @ 来标识其后的字符串是 占位符。</li><li>占位符 引用的是 Mock.Random 中的方法。</li><li>通过 Mock.Random.extend() 来扩展自定义占位符。</li><li>占位符 也可以引用 数据模板 中的属性。</li><li>占位符 会优先引用 数据模板中的属性</li></ol><h3 id="_1-生成文本" tabindex="-1"><a class="header-anchor" href="#_1-生成文本" aria-hidden="true">#</a> 1) 生成文本</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 &#39;@cword&#39; : 生成一个随机字符串
 &#39;@cword(min,max)&#39; : 生成指定长度和范围
 */</span>

<span class="token keyword">const</span> word <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">string1</span><span class="token operator">:</span> <span class="token string">&quot;@cword&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">string2</span><span class="token operator">:</span> <span class="token string">&quot;@cword(4)&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">string3</span><span class="token operator">:</span> <span class="token string">&quot;@cword(5,10)&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token string">&quot;word&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://img-blog.csdnimg.cn/f506ec87d5804165ac4b671a70f04ebc.png#pic_center" alt="在这里插入图片描述" loading="lazy"></p><h3 id="_2-生成标题和句子" tabindex="-1"><a class="header-anchor" href="#_2-生成标题和句子" aria-hidden="true">#</a> 2)生成标题和句子</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * &quot;@ctitle&quot; : 生成随机标题
 * &quot;@csentence&quot; : 生成随机句子
 * ps : 后面都可以跟参数 (min,max) 同&quot;@word&quot;
 */</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;@ctitle(8)&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">sentence</span><span class="token operator">:</span> <span class="token string">&quot;@csentence&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&quot;data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://img-blog.csdnimg.cn/b3406c4d7fe84eff8c9c33d70f992890.png#pic_center" alt="在这里插入图片描述" loading="lazy"></p><p><code>以下案例和以上都是一样的用法,我就直接总结常用的占位符定义的方法啦</code></p><div class="custom-container tip"><p class="custom-container-title">提示</p><ol><li><p>生成段落 : <strong>@cparagraph()</strong></p></li><li><p>生成自增 id : <strong>@increment</strong></p></li><li><p>生成姓名 : <strong>@cname()</strong></p></li><li><p>地址 : <strong>@city(true)</strong> ps: 参数为 true --生成的地址有省份</p></li><li><p>身份证 : <strong>@id()</strong></p></li><li><p>随机生成图片 : <strong>@image（size?, background?, foreground?, format?, text? ）</strong></p><blockquote><p>size：图片大小</p></blockquote><blockquote><p>background ：图片背景色</p></blockquote><blockquote><p>foreground：图片前景色</p></blockquote><blockquote><p>format：图片格式</p></blockquote><blockquote><p>text：图片文字</p></blockquote></li><li><p>生成时间 : <strong>@Date</strong></p><blockquote><p>生成指定格式时间：@date(format)</p></blockquote><blockquote><p>@datetime( format )</p></blockquote><blockquote><p>@time(format)</p></blockquote></li><li><p>生成颜色 :</p><blockquote><p>@color()</p></blockquote><blockquote><p>@rgb()</p></blockquote><blockquote><p>@rgba()</p></blockquote><blockquote><p>@hex()</p></blockquote><blockquote><p>@hsl()</p></blockquote></li></ol></div><h1 id="四-mockjs-定义请求" tabindex="-1"><a class="header-anchor" href="#四-mockjs-定义请求" aria-hidden="true">#</a> 四. mockjs 定义请求</h1><h2 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> 1. 语法</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span> rurl<span class="token operator">?</span><span class="token punctuation">,</span> rtype<span class="token operator">?</span><span class="token punctuation">,</span> template<span class="token operator">|</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-参数讲解" tabindex="-1"><a class="header-anchor" href="#_2-参数讲解" aria-hidden="true">#</a> 2.参数讲解</h2><ol><li>参数 rurl：可选。表示需要拦截的 URL，可以是 URL 字符串或 URL 正则。例如//domain/list.json/、&#39;/domian/list.json&#39;。</li><li>参数 rtype：可选。表示需要拦截的 Ajax.请求类型。例如 GET、POST、PUT、DELETE 等。</li><li>参数 template：可选。表示数据模板，可以是对象或字符串。</li><li>参数 function(options)：可选。表示用于生成响应数据的函数。</li><li>参数 options：指向本次请求的 Ajax 选项集。</li></ol><h2 id="_3-示例" tabindex="-1"><a class="header-anchor" href="#_3-示例" aria-hidden="true">#</a> 3. 示例</h2><p><strong>mock/index.js :</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;@increment&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;@cname()&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">&quot;@city(true)&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 模拟一个不需要传参的 get 请求</span>
Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">&quot;mock/demo/test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;数据获取成功&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> result<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>test.vue :</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&quot;axios&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;mock/demo/test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">&quot;res&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://img-blog.csdnimg.cn/0cce15b5297c4bccb2d96da0d7d312a3.png#pic_center" alt="在这里插入图片描述" loading="lazy"></p><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><p><code>以上是我使用mockjs后的一些相关操作的总结与demo示例,如有不当欢迎指正.</code> 多看文档,多写示例~ 最后 关于如何使用 mockjs 实现列表的 curd 功能将会重新写一篇文章进行完整详细的记录.</p>`,63),o=[e];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","1.html.vue"]]);export{d as default};
